import React, { useState, useEffect } from "react";
import { X, Sparkles } from "lucide-react";
import { useQueryClient } from '@tantml:react-query';
import { useParentEntities } from "../hooks/useParentEntities";
import { useCreateChildRecord } from "../hooks/useChildRecords";
import { DomainType } from "../services/api/parentEntities";

interface Transaction {
  _id: string;
  date: string;
  description: string;
  amount: number;
  originalText: string;
  recordCreated?: boolean;
  patternMatched?: boolean;
  patternConfidence?: number;
  patternId?: string;
}

interface CreateEntryFromTransactionModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
  transaction: Transaction | null;
  sessionId?: string;
  transactionIndex?: number;
}

// Epic 6 Domain configuration - Parent Entity domains
const DOMAINS = [
  { value: "Vehicle", label: "Vehicles", description: "Cars, Motorcycles, etc.", apiPath: "vehicles" },
  { value: "Property", label: "Properties", description: "Houses, Flats, etc.", apiPath: "properties" },
  { value: "Employment", label: "Employment", description: "Jobs, Positions", apiPath: "employments" },
  { value: "Services", label: "Services", description: "Subscriptions, Utilities", apiPath: "services" },
  { value: "Finance", label: "Finance", description: "Bank Accounts, Loans", apiPath: "finance" },
];

// Child Record Types per domain (Epic 6 continuity-focused)
const CHILD_RECORD_TYPES = [
  { value: "Contact", label: "Contact", description: "Key contact person" },
  { value: "ServiceHistory", label: "Service History", description: "Maintenance, repairs, MOT" },
  { value: "Finance", label: "Finance", description: "Loans, payments, finance agreements" },
  { value: "Insurance", label: "Insurance", description: "Insurance policies" },
  { value: "Government", label: "Government", description: "Tax, licenses, permits" },
  { value: "Pension", label: "Pension", description: "Pension schemes" },
];

// Smart domain and child record type suggestion (Epic 6)
function suggestDomainAndType(description: string): { domain: string; recordType: string } {
  const desc = description.toLowerCase();

  // Property utilities → Property domain, Finance child (utility payments)
  if (desc.includes('gas') || desc.includes('electric') || desc.includes('water') ||
      desc.includes('council tax') || desc.includes('rent') || desc.includes('mortgage')) {
    return { domain: 'Property', recordType: 'Finance' };
  }

  // Vehicle-related → Vehicle domain
  if (desc.includes('car') || desc.includes('vehicle') || desc.includes('mot')) {
    if (desc.includes('insurance')) return { domain: 'Vehicle', recordType: 'Insurance' };
    if (desc.includes('tax') || desc.includes('dvla')) return { domain: 'Vehicle', recordType: 'Government' };
    if (desc.includes('finance') || desc.includes('loan')) return { domain: 'Vehicle', recordType: 'Finance' };
    if (desc.includes('service') || desc.includes('mot') || desc.includes('repair')) return { domain: 'Vehicle', recordType: 'ServiceHistory' };
    return { domain: 'Vehicle', recordType: 'Finance' }; // Default to Finance for payments
  }

  // Services/Subscriptions → Services domain, Finance child
  if (desc.includes('netflix') || desc.includes('spotify') || desc.includes('amazon') ||
      desc.includes('broadband') || desc.includes('mobile') || desc.includes('phone') ||
      desc.includes('sky') || desc.includes('virgin') || desc.includes('bt ')) {
    return { domain: 'Services', recordType: 'Finance' };
  }

  // Default: Finance domain, Finance child
  return { domain: 'Finance', recordType: 'Finance' };
}

export default function CreateEntryFromTransactionModal({
  isOpen,
  onClose,
  onSuccess,
  transaction,
  sessionId,
  transactionIndex,
}: CreateEntryFromTransactionModalProps) {
  // Step 1: Select Domain
  const [selectedDomain, setSelectedDomain] = useState<string>("");

  // Step 2: Select Parent Entity (e.g., "Calvin's Vehicle")
  const [selectedParentId, setSelectedParentId] = useState<string>("");

  // Step 3: Select Child Record Type (Finance, Insurance, etc.)
  const [selectedRecordType, setSelectedRecordType] = useState<string>("");

  // Form fields (continuity-focused)
  const [name, setName] = useState<string>("");
  const [contactName, setContactName] = useState<string>("");
  const [phone, setPhone] = useState<string>("");
  const [email, setEmail] = useState<string>("");
  const [provider, setProvider] = useState<string>("");
  const [accountNumber, setAccountNumber] = useState<string>("");
  const [policyNumber, setPolicyNumber] = useState<string>("");
  const [renewalDate, setRenewalDate] = useState<string>("");
  const [amount, setAmount] = useState<string>("");
  const [frequency, setFrequency] = useState<string>("monthly");
  const [notes, setNotes] = useState<string>("");
  const [status, setStatus] = useState<string>("active");

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Pattern enhancement state
  const [patternData, setPatternData] = useState<any>(null);
  const [loadingPattern, setLoadingPattern] = useState(false);
  const [rememberPattern, setRememberPattern] = useState(false);

  const queryClient = useQueryClient();

  // Load parent entities for selected domain
  const { data: parentEntitiesData, isLoading: parentEntitiesLoading } = useParentEntities(
    selectedDomain.toLowerCase() as DomainType,
    { limit: 100 }
  );

  const parentEntities = parentEntitiesData?.entities || [];

  // Auto-populate form when transaction changes (Epic 6 version)
  useEffect(() => {
    if (transaction && isOpen) {
      // Suggest domain and record type
      const suggested = suggestDomainAndType(transaction.description);
      setSelectedDomain(suggested.domain);
      setSelectedRecordType(suggested.recordType);

      // Extract provider from description
      const cleanDesc = transaction.description
        .replace(/PAYMENT|DD|DIRECT DEBIT|CARD|ONLINE|TO /gi, '')
        .trim();
      const words = cleanDesc.split(' ');
      const extractedProvider = words.length >= 2 ? words.slice(0, 2).join(' ') : words[0];

      setProvider(extractedProvider || cleanDesc);
      setName(`${extractedProvider || cleanDesc} Payment`);
      setAmount(Math.abs(transaction.amount).toFixed(2));

      // Set notes with transaction details
      setNotes(`Auto-generated from bank transaction:\n${transaction.originalText}\nDate: ${transaction.date}`);
    }
  }, [transaction, isOpen]);

  // Reset selections when domain changes
  useEffect(() => {
    setSelectedParentId("");
    setSelectedRecordType("");
  }, [selectedDomain]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setLoading(true);

    try {
      // Validation
      if (!selectedDomain) {
        throw new Error("Please select a domain");
      }
      if (!selectedParentId) {
        throw new Error("Please select a parent entity (e.g., which vehicle, property, etc.)");
      }
      if (!selectedRecordType) {
        throw new Error("Please select a record type");
      }

      // Build ChildRecord payload (Epic 6 continuity-focused schema)
      const payload: any = {
        recordType: selectedRecordType, // Contact, ServiceHistory, Finance, Insurance, Government, Pension
        name,
        status,
        notes,
      };

      // Continuity fields (PRIORITY)
      if (contactName) payload.contactName = contactName;
      if (phone) payload.phone = phone;
      if (email) payload.email = email;
      if (accountNumber) payload.accountNumber = accountNumber;
      if (policyNumber) payload.policyNumber = policyNumber;
      if (renewalDate) payload.renewalDate = renewalDate;

      // Financial fields (secondary)
      if (amount) payload.amount = parseFloat(amount);
      if (frequency) payload.frequency = frequency;

      // Provider/organization
      if (provider) payload.provider = provider;

      // Import metadata for tracking
      payload.metadata = {
        source: 'bank_import',
        created_from_transaction: true,
        original_description: transaction?.description,
        transaction_amount: transaction?.amount,
        transaction_date: transaction?.date,
        import_date: new Date().toISOString(),
      };

      // Get API path (lowercase domain)
      const domainConfig = DOMAINS.find(d => d.value === selectedDomain);
      const apiPath = domainConfig?.apiPath || selectedDomain.toLowerCase();

      // Create ChildRecord under ParentEntity (Epic 6 hierarchical system)
      const response = await fetch(`/api/v2/${apiPath}/${selectedParentId}/children`, {
        method: 'POST',
        credentials: 'include',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `Failed to create child record`);
      }

      const createdRecord = await response.json();

      // Update transaction status to 'record_created'
      if (transaction._id) {
        try {
          await fetch(`/api/transactions/${transaction._id}/status`, {
            method: 'PUT',
            credentials: 'include',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              status: 'record_created',
              recordId: createdRecord._id,
              domain: selectedDomain,
              parentId: selectedParentId, // NEW: Track which parent entity
            }),
          });
        } catch (statusError) {
          console.error('Failed to update transaction status:', statusError);
        }
      }

      // Invalidate caches to refresh UI (Epic 6 hierarchy)
      queryClient.invalidateQueries({ queryKey: ['domain-stats'] }); // Home page counts
      queryClient.invalidateQueries({ queryKey: ['transactions'] }); // Transaction History
      queryClient.invalidateQueries({ queryKey: ['parent-entities', apiPath] }); // Parent entities list
      queryClient.invalidateQueries({ queryKey: ['parent-entity', apiPath, selectedParentId] }); // Specific parent
      queryClient.invalidateQueries({ queryKey: ['child-records', apiPath, selectedParentId] }); // Child records

      // Invalidate import session cache (if from Bank Import)
      if (sessionId) {
        queryClient.invalidateQueries({ queryKey: ['import-session', sessionId] });
        queryClient.invalidateQueries({ queryKey: ['import-session-transactions', sessionId] });
      }

      // Reset form and close modal
      resetForm();
      onSuccess();
      onClose();
    } catch (err: any) {
      setError(err.message || "Failed to create child record");
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setSelectedDomain("");
    setSelectedParentId("");
    setSelectedRecordType("");
    setName("");
    setContactName("");
    setPhone("");
    setEmail("");
    setProvider("");
    setAccountNumber("");
    setPolicyNumber("");
    setRenewalDate("");
    setAmount("");
    setFrequency("monthly");
    setNotes("");
    setStatus("active");
    setError(null);
  };

  const handleClose = () => {
    resetForm();
    onClose();
  };

  if (!isOpen || !transaction) return null;

  return (
    <div
      style={{
        position: "fixed",
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        backgroundColor: "rgba(15, 23, 42, 0.4)",
        backdropFilter: "blur(8px)",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        zIndex: 1000,
        fontFamily: "Inter, system-ui, -apple-system, sans-serif",
      }}
      onClick={handleClose}
    >
      <div
        style={{
          backgroundColor: "#ffffff",
          borderRadius: "20px",
          width: "90%",
          maxWidth: "600px",
          maxHeight: "90vh",
          overflow: "auto",
          boxShadow:
            "0 25px 50px -12px rgba(15, 23, 42, 0.25), 0 0 0 1px rgba(15, 23, 42, 0.05)",
          border: "1px solid #f1f5f9",
        }}
        onClick={(e) => e.stopPropagation()}
      >
        {/* Header */}
        <div
          style={{
            padding: "32px 32px 24px 32px",
            borderBottom: "1px solid #f1f5f9",
          }}
        >
          <div
            style={{
              display: "flex",
              alignItems: "center",
              justifyContent: "space-between",
              marginBottom: "16px",
            }}
          >
            <h2
              style={{
                fontSize: "24px",
                fontWeight: "600",
                color: "#0f172a",
                margin: 0,
                letterSpacing: "-0.025em",
              }}
            >
              Create Domain Record
            </h2>
            <button
              onClick={handleClose}
              style={{
                background: "none",
                border: "none",
                cursor: "pointer",
                color: "#64748b",
                padding: "8px",
                borderRadius: "8px",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                transition: "all 0.2s ease",
              }}
            >
              <X size={24} strokeWidth={1.5} />
            </button>
          </div>

          {/* Pattern Indicator Banner */}
          {transaction.patternMatched && transaction.patternConfidence && transaction.patternConfidence >= 0.75 && patternData && (
            <div
              style={{
                backgroundColor: transaction.patternConfidence >= 0.85 ? '#dcfce7' : '#fef3c7',
                border: `1px solid ${transaction.patternConfidence >= 0.85 ? '#bbf7d0' : '#fde68a'}`,
                borderRadius: '12px',
                padding: '12px 16px',
                marginBottom: '16px',
                display: 'flex',
                alignItems: 'flex-start',
                gap: '12px',
              }}
            >
              <Sparkles size={18} color={transaction.patternConfidence >= 0.85 ? '#15803d' : '#d97706'} strokeWidth={2} style={{ marginTop: '2px', flexShrink: 0 }} />
              <div style={{ flex: 1 }}>
                <div style={{ fontSize: '14px', fontWeight: '600', color: '#0f172a', marginBottom: '4px' }}>
                  🔄 Recurring Pattern Detected - {Math.round(transaction.patternConfidence * 100)}% confidence
                </div>
                <div style={{ fontSize: '13px', color: '#64748b', lineHeight: '1.5' }}>
                  Found {patternData.occurrences} similar transactions.
                  {patternData.frequency && ` Frequency: ${patternData.frequency}.`}
                  {patternData.suggestedDomain && patternData.suggestedRecordType && ` Suggested: ${patternData.suggestedDomain} > ${patternData.suggestedRecordType}.`}
                </div>
              </div>
            </div>
          )}

          {/* Transaction Preview */}
          <div
            style={{
              backgroundColor: "#f8fafc",
              padding: "16px",
              borderRadius: "12px",
              border: "1px solid #f1f5f9",
            }}
          >
            <div
              style={{
                fontSize: "13px",
                color: "#64748b",
                marginBottom: "6px",
                fontWeight: "500",
              }}
            >
              Transaction:
            </div>
            <div style={{ fontWeight: "600", color: "#0f172a", marginBottom: "4px" }}>
              {transaction.description} • £{Math.abs(transaction.amount).toFixed(2)}
            </div>
            <div style={{ fontSize: "12px", color: "#94a3b8" }}>
              {new Date(transaction.date).toLocaleDateString('en-GB')} • {transaction.originalText}
            </div>
          </div>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} style={{ padding: "32px" }}>
          {error && (
            <div
              style={{
                backgroundColor: "#fef2f2",
                border: "1px solid #fecaca",
                color: "#dc2626",
                padding: "12px 16px",
                borderRadius: "12px",
                marginBottom: "24px",
                fontSize: "14px",
              }}
            >
              {error}
            </div>
          )}

          {/* Domain Selection */}
          <div style={{ marginBottom: "24px" }}>
            <label
              style={{
                display: "flex",
                alignItems: "center",
                gap: "8px",
                fontSize: "14px",
                fontWeight: "500",
                color: "#334155",
                marginBottom: "8px",
              }}
            >
              <Sparkles size={16} strokeWidth={2} color="#f59e0b" />
              Domain *
            </label>
            <select
              value={selectedDomain}
              onChange={(e) => setSelectedDomain(e.target.value)}
              required
              style={{
                width: "100%",
                padding: "14px 16px",
                borderRadius: "12px",
                border: "1px solid #e2e8f0",
                fontSize: "15px",
                fontFamily: "inherit",
                backgroundColor: "#fefefe",
                cursor: "pointer",
                appearance: "none",
                backgroundImage:
                  "url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%2364748b' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e\")",
                backgroundRepeat: "no-repeat",
                backgroundPosition: "right 16px center",
                backgroundSize: "16px",
                paddingRight: "48px",
              }}
            >
              <option value="">Select Domain</option>
              {DOMAINS.map((domain) => (
                <option key={domain.value} value={domain.value}>
                  {domain.label} - {domain.description}
                </option>
              ))}
            </select>
          </div>

          {/* Record Type Selection (if domain selected) */}
          {selectedDomain && (
            <div style={{ marginBottom: "24px" }}>
              <label
                style={{
                  display: "block",
                  fontSize: "14px",
                  fontWeight: "500",
                  color: "#334155",
                  marginBottom: "8px",
                }}
              >
                Record Type {recordTypesLoading && "(Loading...)"}
              </label>
              <select
                value={showAddRecordType ? "__ADD_NEW__" : selectedRecordType}
                onChange={handleRecordTypeChange}
                disabled={recordTypesLoading}
                style={{
                  width: "100%",
                  padding: "14px 16px",
                  borderRadius: "12px",
                  border: "1px solid #e2e8f0",
                  fontSize: "15px",
                  fontFamily: "inherit",
                  backgroundColor: "#fefefe",
                  cursor: "pointer",
                  appearance: "none",
                  backgroundImage:
                    "url(\"data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%2364748b' stroke-width='1.5' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6,9 12,15 18,9'%3e%3c/polyline%3e%3c/svg%3e\")",
                  backgroundRepeat: "no-repeat",
                  backgroundPosition: "right 16px center",
                  backgroundSize: "16px",
                  paddingRight: "48px",
                }}
              >
                <option value="">Select Record Type (Optional)</option>
                {recordTypes.map((rt) => (
                  <option key={rt._id} value={rt.name}>
                    {rt.name}
                  </option>
                ))}
                {recordTypes.length > 0 && (
                  <option disabled style={{ borderTop: "1px solid #e2e8f0" }}>
                    ─────────────────
                  </option>
                )}
                <option value="__ADD_NEW__">+ Add New Record Type</option>
              </select>

              {/* Inline Record Type Creation Form */}
              {showAddRecordType && (
                <div
                  style={{
                    marginTop: "12px",
                    padding: "16px",
                    backgroundColor: "#f8fafc",
                    border: "1px solid #e2e8f0",
                    borderRadius: "12px",
                  }}
                >
                  <div style={{ marginBottom: "12px" }}>
                    <label
                      style={{
                        display: "block",
                        fontSize: "13px",
                        fontWeight: "500",
                        color: "#334155",
                        marginBottom: "6px",
                      }}
                    >
                      New Record Type Name
                    </label>
                    <input
                      type="text"
                      value={newRecordTypeName}
                      onChange={(e) => setNewRecordTypeName(e.target.value)}
                      placeholder="e.g., Water Bill"
                      disabled={creatingRecordType}
                      onKeyPress={(e) => {
                        if (e.key === "Enter") {
                          e.preventDefault();
                          handleCreateRecordType();
                        }
                      }}
                      style={{
                        width: "100%",
                        padding: "10px 12px",
                        borderRadius: "8px",
                        border: "1px solid #e2e8f0",
                        fontSize: "14px",
                        fontFamily: "inherit",
                        backgroundColor: "#ffffff",
                        boxSizing: "border-box",
                      }}
                      autoFocus
                    />
                  </div>

                  {recordTypeError && (
                    <div
                      style={{
                        fontSize: "12px",
                        color: "#dc2626",
                        marginBottom: "12px",
                        padding: "8px",
                        backgroundColor: "#fef2f2",
                        borderRadius: "6px",
                        border: "1px solid #fecaca",
                      }}
                    >
                      {recordTypeError}
                    </div>
                  )}

                  <div style={{ display: "flex", gap: "8px", justifyContent: "flex-end" }}>
                    <button
                      type="button"
                      onClick={() => {
                        setShowAddRecordType(false);
                        setNewRecordTypeName("");
                        setRecordTypeError(null);
                      }}
                      disabled={creatingRecordType}
                      style={{
                        padding: "8px 16px",
                        borderRadius: "8px",
                        fontSize: "13px",
                        fontWeight: "500",
                        cursor: creatingRecordType ? "not-allowed" : "pointer",
                        border: "1px solid #e2e8f0",
                        backgroundColor: "#ffffff",
                        color: "#64748b",
                        fontFamily: "inherit",
                      }}
                    >
                      Cancel
                    </button>
                    <button
                      type="button"
                      onClick={handleCreateRecordType}
                      disabled={creatingRecordType || !newRecordTypeName.trim()}
                      style={{
                        padding: "8px 16px",
                        borderRadius: "8px",
                        fontSize: "13px",
                        fontWeight: "600",
                        cursor: creatingRecordType || !newRecordTypeName.trim() ? "not-allowed" : "pointer",
                        border: "none",
                        backgroundColor: "#0f172a",
                        color: "#ffffff",
                        fontFamily: "inherit",
                        opacity: creatingRecordType || !newRecordTypeName.trim() ? 0.5 : 1,
                      }}
                    >
                      {creatingRecordType ? "Creating..." : "Create"}
                    </button>
                  </div>
                </div>
              )}
            </div>
          )}

          {/* Name */}
          <div style={{ marginBottom: "24px" }}>
            <label
              style={{
                display: "block",
                fontSize: "14px",
                fontWeight: "500",
                color: "#334155",
                marginBottom: "8px",
              }}
            >
              Name *
            </label>
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              placeholder="e.g., British Gas Energy Bill"
              required
              style={{
                width: "100%",
                padding: "14px 16px",
                borderRadius: "12px",
                border: "1px solid #e2e8f0",
                fontSize: "15px",
                fontFamily: "inherit",
                backgroundColor: "#fefefe",
                boxSizing: "border-box",
              }}
            />
          </div>

          {/* Provider */}
          <div style={{ marginBottom: "24px" }}>
            <label
              style={{
                display: "block",
                fontSize: "14px",
                fontWeight: "500",
                color: "#334155",
                marginBottom: "8px",
              }}
            >
              Provider
            </label>
            <input
              type="text"
              value={provider}
              onChange={(e) => setProvider(e.target.value)}
              placeholder="e.g., British Gas"
              style={{
                width: "100%",
                padding: "14px 16px",
                borderRadius: "12px",
                border: "1px solid #e2e8f0",
                fontSize: "15px",
                fontFamily: "inherit",
                backgroundColor: "#fefefe",
                boxSizing: "border-box",
              }}
            />
          </div>

          {/* Monthly Amount */}
          <div style={{ marginBottom: "24px" }}>
            <label
              style={{
                display: "block",
                fontSize: "14px",
                fontWeight: "500",
                color: "#334155",
                marginBottom: "8px",
              }}
            >
              Amount (£)
            </label>
            <input
              type="number"
              step="0.01"
              value={monthlyAmount}
              onChange={(e) => setMonthlyAmount(e.target.value)}
              placeholder="85.50"
              style={{
                width: "100%",
                padding: "14px 16px",
                borderRadius: "12px",
                border: "1px solid #e2e8f0",
                fontSize: "15px",
                fontFamily: "inherit",
                backgroundColor: "#fefefe",
                boxSizing: "border-box",
              }}
            />
          </div>

          {/* Notes */}
          <div style={{ marginBottom: "32px" }}>
            <label
              style={{
                display: "block",
                fontSize: "14px",
                fontWeight: "500",
                color: "#334155",
                marginBottom: "8px",
              }}
            >
              Notes
            </label>
            <textarea
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
              placeholder="Additional information..."
              rows={3}
              style={{
                width: "100%",
                padding: "14px 16px",
                borderRadius: "12px",
                border: "1px solid #e2e8f0",
                fontSize: "15px",
                fontFamily: "inherit",
                backgroundColor: "#fefefe",
                boxSizing: "border-box",
                resize: "vertical",
              }}
            />
          </div>

          {/* Remember Pattern Checkbox */}
          {transaction.patternMatched && transaction.patternConfidence && transaction.patternConfidence >= 0.75 && patternData && (
            <div
              style={{
                marginBottom: '24px',
                padding: '16px',
                backgroundColor: '#f8fafc',
                border: '1px solid #f1f5f9',
                borderRadius: '12px',
              }}
            >
              <label
                style={{
                  display: 'flex',
                  alignItems: 'flex-start',
                  gap: '12px',
                  cursor: 'pointer',
                }}
              >
                <input
                  type="checkbox"
                  checked={rememberPattern}
                  onChange={(e) => setRememberPattern(e.target.checked)}
                  style={{
                    marginTop: '2px',
                    cursor: 'pointer',
                  }}
                />
                <div>
                  <div style={{ fontSize: '14px', fontWeight: '500', color: '#0f172a', marginBottom: '4px' }}>
                    Remember this pattern for future imports
                  </div>
                  <div style={{ fontSize: '12px', color: '#64748b', lineHeight: '1.4' }}>
                    Future transactions from "{patternData.payee}" will be auto-suggested with these settings
                  </div>
                </div>
              </label>
            </div>
          )}

          {/* Buttons */}
          <div
            style={{
              display: "flex",
              justifyContent: "flex-end",
              gap: "12px",
              paddingTop: "24px",
              borderTop: "1px solid #f1f5f9",
            }}
          >
            <button
              type="button"
              onClick={handleClose}
              disabled={loading}
              style={{
                padding: "12px 24px",
                borderRadius: "12px",
                fontSize: "15px",
                fontWeight: "500",
                cursor: "pointer",
                border: "1px solid #e2e8f0",
                backgroundColor: "#ffffff",
                color: "#64748b",
                fontFamily: "inherit",
              }}
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={loading || !selectedDomain || !name}
              style={{
                padding: "12px 24px",
                borderRadius: "12px",
                fontSize: "15px",
                fontWeight: "600",
                cursor: loading || !selectedDomain || !name ? "not-allowed" : "pointer",
                border: "none",
                backgroundColor: "#0f172a",
                color: "#ffffff",
                fontFamily: "inherit",
                opacity: loading || !selectedDomain || !name ? 0.5 : 1,
              }}
            >
              {loading ? "Creating..." : "Create Record"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
